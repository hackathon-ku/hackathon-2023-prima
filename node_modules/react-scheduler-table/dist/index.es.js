import React, { Component } from 'react';
import PropTypes from 'prop-types';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".Timetable_Timetable__1_PN4 table {\r\n\twidth: 100%;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.Timetable_Timetable__1_PN4 td {\r\n\theight: 40px;\r\n  vertical-align: top;\r\n\tborder: 1px solid #000000;\r\n}\r\n\r\n.Timetable_Timetable__1_PN4 tr td:first-child {\r\n\tpadding: 2px;\r\n\twidth: 5%;\r\n\ttext-align: right;\r\n}\r\n\r\n.Timetable_Timetable__1_PN4 thead th {\r\n\tpadding: 15px;\r\n\tborder: 1px solid #000000;\r\n}\r\n\r\n/* TimeCell */\r\n\r\n.Timetable_TimeCell__1IfXR {\r\n\tpadding: 0;\r\n}\r\n\r\n.Timetable_TimeCell__wrapper__2KKv- {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tposition: relative;\r\n}\r\n\r\n.Timetable_TimeCell__clear__3I5PX {\r\n\twidth: 25px;\r\n  height: 25px;\r\n\tposition: absolute;\r\n\ttop: 0px;\r\n  right: 0px;\r\n\tcursor: pointer;\r\n}\r\n\r\n.Timetable_TimeCell__save__3HCGK {\r\n\tposition: absolute;\r\n\tbottom: 2%;\r\n\tright: 5%;\r\n\tcolor: white;\r\n\tfont-weight: 500;\r\n\ttext-transform: uppercase;\r\n\tcursor: pointer;\r\n}\r\n\r\n.Timetable_TimeCell__activeTime__1igQY {\r\n\tpadding: 0px 10px;\r\n}\r\n\r\n.Timetable_TimeCell__button__aW3pq {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n}\r\n\r\n.Timetable_TimeCell__button__aW3pq:hover {\r\n\tbackground-color: #656d74;\r\n}\r\n\r\n.Timetable_TimeCell__button__aW3pq:active {\r\n\tbackground-color: #8796a5;\r\n}\r\n\r\n.Timetable_TimeCell__1IfXR.Timetable_start__aq4tP {\r\n\tbackground-color: #607D8B;\r\n}\r\n\r\n.Timetable_TimeCell__1IfXR.Timetable_between__PQZG6 {\r\n\tbackground-color: #CFD8DC;\r\n}\r\n\r\n.Timetable_TimeCell__1IfXR.Timetable_end__3_9SW {\r\n\tbackground-color: #455A64;\r\n}";
var styles = { "Timetable": "Timetable_Timetable__1_PN4", "TimeCell": "Timetable_TimeCell__1IfXR", "TimeCell__wrapper": "Timetable_TimeCell__wrapper__2KKv-", "TimeCell__clear": "Timetable_TimeCell__clear__3I5PX", "TimeCell__save": "Timetable_TimeCell__save__3HCGK", "TimeCell__activeTime": "Timetable_TimeCell__activeTime__1igQY", "TimeCell__button": "Timetable_TimeCell__button__aW3pq", "start": "Timetable_start__aq4tP", "between": "Timetable_between__PQZG6", "end": "Timetable_end__3_9SW" };
styleInject(css);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }return target;
  };return _extends.apply(this, arguments);
}

var _ref =
/*#__PURE__*/
React.createElement("path", {
  d: "M131.804 106.491l75.936-75.936c6.99-6.99 6.99-18.323 0-25.312-6.99-6.99-18.322-6.99-25.312 0L106.491 81.18 30.554 5.242c-6.99-6.99-18.322-6.99-25.312 0-6.989 6.99-6.989 18.323 0 25.312l75.937 75.936-75.937 75.937c-6.989 6.99-6.989 18.323 0 25.312 6.99 6.99 18.322 6.99 25.312 0l75.937-75.937 75.937 75.937c6.989 6.99 18.322 6.99 25.312 0 6.99-6.99 6.99-18.322 0-25.312l-75.936-75.936z",
  fill: "#fff",
  fillRule: "evenodd",
  clipRule: "evenodd"
});

var SvgComponent = function SvgComponent(props) {
  return React.createElement("svg", _extends({
    viewBox: "0 0 212.982 212.982"
  }, props), _ref);
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends$1 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var timeToStringParser = function timeToStringParser(is12hours) {
		return function (time) {
				var timeStr = time.toString();
				var m = "00";
				if (timeStr.includes(".")) {
						var hourPart = "0" + timeStr.slice(timeStr.indexOf("."));
						m = 60 * hourPart;
				}
				var h = parseInt(time, 10) < 10 ? "0" + parseInt(time, 10) : parseInt(time, 10);
				var parsedTime = h + ":" + m;

				return is12hours ? tConv12(parsedTime) : parsedTime;
		};
};

var timeToIntParser = function timeToIntParser(is12hours) {
		return function (time) {
				time = is12hours ? tConv24(time) : time;
				var timeArr = time.split(':');
				var h = parseInt(timeArr[0], 10);
				var m = parseInt(timeArr[1], 10) / 60;

				return h + m;
		};
};

var tConv12 = function tConv12(time24) {
		var ts = time24;
		var H = +ts.substr(0, 2);
		var h = H % 12 || 12;
		h = h < 10 ? "0" + h : h; // leading 0 at the left for 1 digit hours
		var ampm = H < 12 ? " AM" : " PM";
		ts = h + ts.substr(2, 3) + ampm;
		return ts;
};

var tConv24 = function tConv24(time12h) {
		var _time12h$split = time12h.split(' '),
		    _time12h$split2 = slicedToArray(_time12h$split, 2),
		    time = _time12h$split2[0],
		    modifier = _time12h$split2[1];

		var _time$split = time.split(':'),
		    _time$split2 = slicedToArray(_time$split, 2),
		    hours = _time$split2[0],
		    minutes = _time$split2[1];

		if (hours === '12') {
				hours = '00';
		}

		if (modifier === 'PM') {
				hours = parseInt(hours, 10) + 12;
		}

		return hours + ":" + minutes;
};

var ID = function ID() {
		return "_" + Math.random().toString(36).substr(2, 9);
};

var css$1 = "/* ReservedTime */\r\n\r\n.ReservedTime_ReservedTime__181uI {\r\n\tz-index: 100;\r\n\tpadding: 10px;\r\n\tposition: absolute;\r\n\twidth: 98%;\r\n\tmargin-left: calc(2% / 2);\r\n\tmargin-top: 2px;\r\n\tborder-radius: 5px;\r\n\tborder: 2px solid rgb(0, 0, 0);\r\n\tbackground-color: rgba(0, 0, 0, 0.9);\r\n\tcolor: #ffffff;\r\n}\r\n\r\n.ReservedTime_ReservedTime__heading__3K7N- {\r\n\tmargin: 0;\r\n  margin-top: 5%;\r\n\tfont-size: 18px;\r\n}\r\n\r\n.ReservedTime_ReservedTime__delete__1D6VL {\r\n  width: 25px;\r\n  height: 25px;\r\n\tposition: absolute;\r\n\ttop: 0px;\r\n  right: 0px;\r\n\tcursor: pointer;\r\n}";
var styles$1 = { "ReservedTime": "ReservedTime_ReservedTime__181uI", "ReservedTime__heading": "ReservedTime_ReservedTime__heading__3K7N-", "ReservedTime__delete": "ReservedTime_ReservedTime__delete__1D6VL" };
styleInject(css$1);

var ReservedTime = function ReservedTime(_ref) {
	var cellHeight = _ref.cellHeight,
	    className = _ref.className,
	    content = _ref.content,
	    time = _ref.time,
	    hourSplit = _ref.hourSplit,
	    is12hours = _ref.is12hours,
	    removeReserved = _ref.removeReserved;

	var blockHeight = cellHeight * ((time.end - time.start) * 1 / hourSplit) - 3 + "px";

	var style = {
		height: blockHeight
	};
	var timeParser = timeToStringParser(is12hours);

	return React.createElement(
		'div',
		{ className: (className || '') + ' ' + styles$1.ReservedTime, style: style },
		React.createElement(
			'button',
			{
				className: styles$1.ReservedTime__delete,
				onClick: function onClick() {
					return removeReserved(time.id);
				}
			},
			React.createElement(SvgComponent, null)
		),
		content(_extends$1({}, time, { parsedStart: timeParser(time.start), parsedEnd: timeParser(time.end) }))
	);
};

var settings = {
	cellHeight: 40,
	startDay: "01:00",
	endDay: "24:00",
	hourSplit: 1,
	columnCnt: 1,
	is12hours: false
};

var Timetable = function (_Component) {
	inherits(Timetable, _Component);

	function Timetable(props) {
		classCallCheck(this, Timetable);

		var _this = possibleConstructorReturn(this, (Timetable.__proto__ || Object.getPrototypeOf(Timetable)).call(this, props));

		_this.state = {
			newStartTime: null,
			newEndTime: null,
			activeColumn: null,
			reserved: _this.props.reserved || []
		};

		_this.addTime = _this.addTime.bind(_this);
		_this.resetTime = _this.resetTime.bind(_this);
		_this.addToReserved = _this.addToReserved.bind(_this);
		_this.removeFromReserved = _this.removeFromReserved.bind(_this);
		return _this;
	}

	createClass(Timetable, [{
		key: "removeFromReserved",
		value: function removeFromReserved(id) {
			var updatedReserved = this.state.reserved.filter(function (item) {
				return item.id !== id;
			});
			this.setState({ reserved: updatedReserved });
		}
	}, {
		key: "addToReserved",
		value: function addToReserved() {
			var _state = this.state,
			    activeColumn = _state.activeColumn,
			    newStartTime = _state.newStartTime,
			    newEndTime = _state.newEndTime,
			    reserved = _state.reserved;
			var hourSplit = this.settings.hourSplit;


			var isNewTimeValid = function isNewTimeValid(newTime, reserved) {
				var valid = true;
				for (var i = 0; i < reserved.length; i++) {
					var time = reserved[i];
					if (newTime.column === time.column) {
						if (newTime.start >= time.start && newTime.start < time.end || newTime.end > time.start && newTime.end <= time.end || newTime.start < time.start && newTime.end > time.end) {
							valid = false;
						}
					}
				}
				return valid;
			};

			var newTime = {
				id: ID(),
				start: newStartTime,
				end: newEndTime + hourSplit,
				column: activeColumn
			};

			if (isNewTimeValid(newTime, reserved)) {
				var newReserved = [].concat(toConsumableArray(reserved), [newTime]);
				this.setState({ reserved: newReserved });
				this.resetTime();
				if (this.props.onSaveTime) this.props.onSaveTime(newReserved);
			} else {
				alert("Time is not valid");
			}
		}
	}, {
		key: "addTime",
		value: function addTime(time, column) {
			var _state2 = this.state,
			    activeColumn = _state2.activeColumn,
			    newStartTime = _state2.newStartTime,
			    newEndTime = _state2.newEndTime,
			    reserved = _state2.reserved;

			var newTimeObj = {};
			// chech if new column === column from state OR activeColumn is falsy
			if (column === activeColumn || !activeColumn) {
				// check if new 'end' time is not set
				if (!newEndTime) {
					// check if new start time exist and new added time greater than start time
					if (newStartTime && time > newStartTime) {
						newTimeObj = { newEndTime: time };
						this.setState(_extends$1({}, newTimeObj));
					} else {
						newTimeObj = { newStartTime: time, activeColumn: column };
						this.setState(_extends$1({}, newTimeObj));
					}
				} else if (
				// check if new 'end' time is exist AND new 'end' time is not less than 'start' time
				newEndTime && time < newStartTime) {
					newTimeObj = { newStartTime: time, newEndTime: null };
					this.setState(_extends$1({}, newTimeObj));
				} else {
					newTimeObj = { newEndTime: time };
					this.setState(_extends$1({}, newTimeObj));
				}
			} else {
				newTimeObj = {
					newStartTime: time,
					newEndTime: null,
					activeColumn: column
				};
				this.setState(_extends$1({}, newTimeObj));
			}
			newTimeObj = _extends$1({
				activeColumn: activeColumn,
				newStartTime: newStartTime,
				newEndTime: newEndTime,
				reserved: reserved
			}, newTimeObj);
			if (this.props.onAddTime) this.props.onAddTime(newTimeObj);
		}
	}, {
		key: "resetTime",
		value: function resetTime() {
			this.setState({ newStartTime: null, newEndTime: null, activeColumn: null });
		}
	}, {
		key: "isTimeReserved",
		value: function isTimeReserved(time, column) {
			var bool = false;
			var reserved = this.state.reserved;
			for (var i = 0; i < reserved.length; i++) {
				if (reserved[i].column === column && time >= reserved[i].start && time <= reserved[i].end - this.settings.hourSplit) {
					bool = true;
					break;
				}
			}
			return bool;
		}
	}, {
		key: "renderTimeCell",
		value: function renderTimeCell(time) {
			var _this2 = this;

			var _settings = this.settings,
			    cellHeight = _settings.cellHeight,
			    columnCnt = _settings.columnCnt,
			    hourSplit = _settings.hourSplit,
			    is12hours = _settings.is12hours;
			var _state3 = this.state,
			    newStartTime = _state3.newStartTime,
			    newEndTime = _state3.newEndTime,
			    activeColumn = _state3.activeColumn;


			var shouldAddButtonRendered = function shouldAddButtonRendered(time, column) {
				var bool = (time !== newStartTime && time !== newEndTime && !(time >= newStartTime && time <= newEndTime) || activeColumn !== column) && !_this2.isTimeReserved(time, column);
				return bool;
			};

			var cellStatus = function cellStatus(column) {
				var status = "";
				if (column === activeColumn) {
					if (time === newStartTime) status = "start";else if (time === newEndTime) status = "end";else if (time > newStartTime && time < newEndTime) status = "between";
				}
				return status;
			};

			var cellReservedStatus = function cellReservedStatus(cellColumn) {
				var status = "";
				var reserved = _this2.state.reserved;
				for (var i = 0; i < reserved.length; i++) {
					var _reserved$i = reserved[i],
					    start = _reserved$i.start,
					    end = _reserved$i.end,
					    column = _reserved$i.column;

					if (cellColumn === column) {
						if (time === start) status = "reserved-start";else if (time === end - hourSplit) status = "reserved-end";else if (time > start && time < end - hourSplit) status = "reserved-between";
					}
				}
				return status;
			};

			var getReservedTime = function getReservedTime(cellColumn) {
				var reserved = _this2.state.reserved;
				for (var i = 0; i < reserved.length; i++) {
					var _reserved$i2 = reserved[i],
					    start = _reserved$i2.start,
					    column = _reserved$i2.column;

					if (cellColumn === column && time === start) return reserved[i];
				}
			};

			// const activeTime = () =>
			// 	newStartTime && !newEndTime
			// 		? `${this.timeToStringParser(newStartTime)} - `
			// 		: newStartTime && newEndTime
			// 		? `${this.timeToStringParser(newStartTime)} - ${this.timeToStringParser(
			// 				newEndTime + hourSplit
			// 		  )}`
			// 		: "";

			var arr = [];

			var _loop = function _loop(column) {
				arr.push(React.createElement(
					"td",
					{
						"data-test": "TimeCell",
						className: styles.TimeCell + " " + (cellStatus(column) ? styles[cellStatus(column)] : '') + " " + cellReservedStatus(column),
						key: column
					},
					React.createElement(
						"div",
						{ className: styles.TimeCell__wrapper },
						cellReservedStatus(column) === "reserved-start" ? React.createElement(ReservedTime, {
							cellHeight: cellHeight,
							className: _this2.props.classNameSavedTime,
							content: _this2.props.savedTimeContent,
							time: getReservedTime(column),
							hourSplit: hourSplit,
							is12hours: is12hours,
							removeReserved: _this2.removeFromReserved
						}) : null,
						cellStatus(column) === "start" ? React.createElement(
							"div",
							null,
							React.createElement(
								"button",
								{
									"data-test": "TimeCell__reset-button",
									className: styles.TimeCell__clear,
									onClick: _this2.resetTime
								},
								React.createElement(SvgComponent, null)
							)
						) : null,
						cellStatus(column) === "end" ? React.createElement(
							"button",
							{
								"data-test": "TimeCell__save-button",
								className: styles.TimeCell__save,
								onClick: _this2.addToReserved
							},
							"Save"
						) : null,
						shouldAddButtonRendered(time, column) ? React.createElement("button", {
							"data-test": "TimeCell__add-time-button",
							className: styles.TimeCell__button,
							onClick: function onClick() {
								return _this2.addTime(time, column);
							}
						}) : null
					)
				));
			};

			for (var column = 1; column <= columnCnt; column++) {
				_loop(column);
			}
			return arr;
		}
	}, {
		key: "renderTimeRow",
		value: function renderTimeRow() {
			var _settings2 = this.settings,
			    cellHeight = _settings2.cellHeight,
			    startDay = _settings2.startDay,
			    endDay = _settings2.endDay,
			    hourSplit = _settings2.hourSplit;

			var arr = [];
			for (var i = startDay; i < endDay; i += hourSplit) {
				var el = React.createElement(
					"tr",
					{ key: i },
					React.createElement(
						"td",
						{ style: { height: cellHeight + "px" } },
						React.createElement(
							"span",
							null,
							Number.isInteger(i) ? this.timeToStringParser(i) : null
						)
					),
					this.renderTimeCell(i)
				);
				arr.push(el);
			}
			return arr;
		}
	}, {
		key: "setSettings",
		value: function setSettings() {
			// Default settings || props settings
			this.settings = this.props.settings ? _extends$1({}, settings, this.props.settings) : settings;

			// Assigning 12 || 24 hour format
			this.timeToStringParser = timeToStringParser(this.settings.is12hours);
			this.timeToIntParser = timeToIntParser(this.settings.is12hours);

			this.settings.startDay = this.timeToIntParser(this.settings.startDay);
			this.settings.endDay = this.timeToIntParser(this.settings.endDay);
		}
	}, {
		key: "render",
		value: function render() {
			this.setSettings();
			var columnCnt = this.settings.columnCnt;
			var className = this.props.className;


			return React.createElement(
				"div",
				{ "data-test": "Timetable", className: styles.Timetable + " " + className || styles.Timetable },
				React.createElement(
					"table",
					null,
					React.createElement(
						"thead",
						null,
						React.createElement(
							"tr",
							null,
							React.createElement(
								"th",
								null,
								React.createElement(
									"span",
									null,
									"Time"
								)
							),
							function () {
								var arr = [];
								for (var i = 0; i < columnCnt; i++) {
									arr.push(React.createElement(
										"th",
										{ key: i },
										React.createElement(
											"span",
											null,
											i + 1
										)
									));
								}
								return arr;
							}()
						)
					),
					React.createElement(
						"tbody",
						null,
						this.renderTimeRow()
					)
				)
			);
		}
	}]);
	return Timetable;
}(Component);

Timetable.propTypes = {
	settings: PropTypes.shape({
		cellHeight: PropTypes.number,
		startDay: PropTypes.string,
		endDay: PropTypes.string,
		hourSplit: PropTypes.number,
		columnCnt: PropTypes.number,
		is12hours: PropTypes.bool
	}),
	reserved: PropTypes.array,
	className: PropTypes.string,
	classNameSavedTime: PropTypes.string,
	onAddTime: PropTypes.func,
	onSaveTime: PropTypes.func
};

export default Timetable;
//# sourceMappingURL=index.es.js.map
